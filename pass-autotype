#!/usr/bin/env python3
import os
import os.path
import subprocess
import time


PASSWORD_STORE_DIR = (
    os.environ.get('PASSWORD_STORE_DIR') or
    os.path.expanduser('~/.password-store'))
USER_FIELD = 'login:'
AUTOTYPE_FIELD = 'autotype:'
AUTOTYPE_DEFAULT = ':user |Tab :password |Return'


def cmd(command):
    return subprocess.Popen(
        command, stdout=subprocess.PIPE, shell=True).communicate()[0].strip().decode('utf-8')


def read_entry(name):
    data = cmd('pass show %s' % name).split('\n')
    user = None
    autotype = AUTOTYPE_DEFAULT
    for line in data:
        if line.startswith(USER_FIELD):
            user = line.replace(USER_FIELD, '', 1).strip()
        elif line.startswith(AUTOTYPE_FIELD):
            autotype = line.replace(AUTOTYPE_FIELD, '', 1).strip()
    return {
        'group': os.path.dirname(name),
        'name': os.path.basename(name),
        'password': data[0],
        'user': user,
        'autotype': autotype,
    }


def main():
    window = cmd('xdotool getactivewindow')
    window_title = cmd('xdotool getwindowname %s' % window)
    entries = cmd(
        'find %s -type f -name "*.gpg"' % PASSWORD_STORE_DIR).split('\n')
    matches = []
    for entry in sorted(entries):
        if not entry:
            continue
        if os.path.basename(entry)[:-4] in window_title:
            matches.append(entry.replace(PASSWORD_STORE_DIR + '/', '')[:-4])
    if not matches:
        print('no entry found for %s' % window_title)
        return

    if len(matches) > 1:
        entries = []
        zenity = []
        for i, name in enumerate(matches):
            entry = read_entry(name)
            entries.append(entry)
            zenity.extend([
                str(i), entry['group'], entry['name'], entry['user']])
        index = cmd(
            'zenity --list --text "Select entry to autotype" '
            '--column Index --column Group --column Title --column User '
            '--hide-column 1 --width 500 --height 300 ' +
            ' '.join(zenity))
        if index == '':
            return
        entry = entries[int(index)]
        time.sleep(0.3)
    else:
        entry = read_entry(matches[0])

    if cmd('xdotool getactivewindow') != window:
        print('Active window has changed, aborting.')
        return
    for item in entry['autotype'].split(' '):
        typ, arg = item[0], item[1:]
        if typ == ':':
            cmd('xdotool type --clearmodifiers %s' % entry[arg])
        elif typ == '|':
            cmd('xdotool key %s' % arg)
        elif typ == '!':
            time.sleep(float(arg))


if __name__ == '__main__':
    main()
